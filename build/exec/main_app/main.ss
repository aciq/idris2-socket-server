#!/usr/bin/chezscheme --program

;; @generated by Idris 0.6.0-25388ecac, Chez backend
(import (chezscheme))
(case (machine-type)
  [(i3fb ti3fb a6fb ta6fb) #f]
  [(i3le ti3le a6le ta6le tarm64le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx tarm64osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")]
  [else (load-shared-object "libc.so")])



(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx tarm64osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt) "windows"]
    [else "unknown"]))

(define blodwen-lazy
  (lambda (f)
    (let ([evaluated #f] [res void])
      (lambda ()
        (if (not evaluated)
            (begin (set! evaluated #t)
                   (set! res (f))
                   (set! f void))
            (void))
        res))))

(define (blodwen-toSignedInt x bits)
  (if (logbit? bits x)
      (logor x (ash -1 bits))
      (logand x (sub1 (ash 1 bits)))))

(define (blodwen-toUnsignedInt x bits)
  (logand x (sub1 (ash 1 bits))))

(define (blodwen-euclidDiv a b)
  (let ((q (quotient a b))
        (r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (- q 1) (+ q 1))
      q)))

(define (blodwen-euclidMod a b)
  (let ((r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (+ r b) (- r b))
      r)))

(define bu+ (lambda (x y bits) (blodwen-toUnsignedInt (+ x y) bits)))
(define bu- (lambda (x y bits) (blodwen-toUnsignedInt (- x y) bits)))
(define bu* (lambda (x y bits) (blodwen-toUnsignedInt (* x y) bits)))
(define bu/ (lambda (x y bits) (blodwen-toUnsignedInt (quotient x y) bits)))

(define bs+ (lambda (x y bits) (blodwen-toSignedInt (+ x y) bits)))
(define bs- (lambda (x y bits) (blodwen-toSignedInt (- x y) bits)))
(define bs* (lambda (x y bits) (blodwen-toSignedInt (* x y) bits)))
(define bs/ (lambda (x y bits) (blodwen-toSignedInt (blodwen-euclidDiv x y) bits)))

(define (integer->bits8 x) (logand x (sub1 (ash 1 8))))
(define (integer->bits16 x) (logand x (sub1 (ash 1 16))))
(define (integer->bits32 x) (logand x (sub1 (ash 1 32))))
(define (integer->bits64 x) (logand x (sub1 (ash 1 64))))

(define (bits16->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits64->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits32 x) (logand x (sub1 (ash 1 32))))

(define (blodwen-bits-shl-signed x y bits) (blodwen-toSignedInt (ash x y) bits))

(define (blodwen-bits-shl x y bits) (logand (ash x y) (sub1 (ash 1 bits))))

(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))

(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))

(define exact-truncate
  (lambda (x)
    (inexact->exact (truncate x))))

(define exact-truncate-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (exact-truncate x) y)))

(define exact-truncate-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (exact-truncate x) y)))

(define cast-char-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (char->integer x) y)))

(define cast-char-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (char->integer x) y)))

(define cast-string-int
  (lambda (x)
    (exact-truncate (cast-num (string->number (destroy-prefix x))))))

(define cast-string-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (cast-string-int x) y)))

(define cast-string-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (cast-string-int x) y)))

(define cast-int-char
  (lambda (x)
    (if (or
          (and (>= x 0) (<= x #xd7ff))
          (and (>= x #xe000) (<= x #x10ffff)))
        (integer->char x)
        (integer->char 0))))

(define cast-string-double
  (lambda (x)
    (exact->inexact (cast-num (string->number (destroy-prefix x))))))


(define (string-concat xs) (apply string-append xs))
(define (string-unpack s) (string->list s))
(define (string-pack xs) (list->string xs))

(define string-cons (lambda (x y) (string-append (string x) y)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define (blodwen-string-iterator-new s)
  0)

(define (blodwen-string-iterator-to-string _ s ofs f)
  (f (substring s ofs (string-length s))))

(define (blodwen-string-iterator-next s ofs)
  (if (>= ofs (string-length s))
      '() ; EOF
      (cons (string-ref s ofs) (+ ofs 1))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define-record thread-handle (semaphore))

(define (blodwen-thread proc)
  (let [(sema (blodwen-make-semaphore 0))]
    (fork-thread (lambda () (proc (vector 0)) (blodwen-semaphore-post sema)))
    (make-thread-handle sema)
    ))

(define (blodwen-thread-wait handle)
  (blodwen-semaphore-wait (thread-handle-semaphore handle)))

;; Thread mailboxes

(define blodwen-thread-data
  (make-thread-parameter #f))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data ty a)
  (blodwen-thread-data a))

;; Semaphore

(define-record semaphore (box mutex condition))

(define (blodwen-make-semaphore init)
  (make-semaphore (box init) (make-mutex) (make-condition)))

(define (blodwen-semaphore-post sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (set-box! sema-box (+ (unbox sema-box) 1))
      (condition-signal (semaphore-condition sema))
    )))

(define (blodwen-semaphore-wait sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (when (= (unbox sema-box) 0)
        (condition-wait (semaphore-condition sema) (semaphore-mutex sema)))
      (set-box! sema-box (- (unbox sema-box) 1))
      )))

;; Barrier

(define-record barrier (count-box num-threads mutex cond))

(define (blodwen-make-barrier num-threads)
  (make-barrier (box 0) num-threads (make-mutex) (make-condition)))

(define (blodwen-barrier-wait barrier)
  (let [(count-box (barrier-count-box barrier))
        (num-threads (barrier-num-threads barrier))
        (mutex (barrier-mutex barrier))
        (condition (barrier-cond barrier))]
    (with-mutex mutex
    (let* [(count-old (unbox count-box))
           (count-new (+ count-old 1))]
      (set-box! count-box count-new)
      (if (= count-new num-threads)
          (condition-broadcast condition)
          (condition-wait condition mutex))
      ))))

;; Channel
; With thanks to Alain Zscheile (@zseri) for help with understanding condition
; variables, and figuring out where the problems were and how to solve them.

(define-record channel (read-mut read-cv read-box val-cv val-box))

(define (blodwen-make-channel ty)
  (make-channel
    (make-mutex)
    (make-condition)
    (box #t)
    (make-condition)
    (box '())
    ))

; block on the read status using read-cv until the value has been read
(define (channel-put-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [read-cv  (channel-read-cv  chan)]
        )
    (if (unbox read-box)
      (void)    ; val has been read, so everything is fine
      (begin    ; otherwise, block/spin with cv
        (condition-wait read-cv read-mut)
        (channel-put-while-helper chan)
        )
      )))

(define (blodwen-channel-put ty chan val)
  (with-mutex (channel-read-mut chan)
    (channel-put-while-helper chan)
    (let ([read-box (channel-read-box chan)]
          [val-box  (channel-val-box  chan)]
          )
      (set-box! val-box val)
      (set-box! read-box #f)
      ))
  (condition-signal (channel-val-cv chan))
  )

; block on the value until it has been set
(define (channel-get-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [val-cv   (channel-val-cv   chan)]
        )
    (if (unbox read-box)
      (begin
        (condition-wait val-cv read-mut)
        (channel-get-while-helper chan)
        )
      (void)
      )))

(define (blodwen-channel-get ty chan)
  (mutex-acquire (channel-read-mut chan))
  (channel-get-while-helper chan)
  (let* ([val-box  (channel-val-box  chan)]
         [read-box (channel-read-box chan)]
         [read-cv  (channel-read-cv  chan)]
         [the-val  (unbox val-box)]
         )
    (set-box! val-box '())
    (set-box! read-box #t)
    (mutex-release (channel-read-mut chan))
    (condition-signal read-cv)
    the-val))

;; Mutex

(define (blodwen-make-mutex)
  (make-mutex))
(define (blodwen-mutex-acquire mutex)
  (mutex-acquire mutex))
(define (blodwen-mutex-release mutex)
  (mutex-release mutex))

;; Condition variable

(define (blodwen-make-condition)
  (make-condition))
(define (blodwen-condition-wait condition mutex)
  (condition-wait condition mutex))
(define (blodwen-condition-wait-timeout condition mutex timeout)
  (let* [(sec (div timeout 1000000))
         (micro (mod timeout 1000000))]
    (condition-wait condition mutex (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal condition)
  (condition-signal condition))
(define (blodwen-condition-broadcast condition)
  (condition-broadcast condition))

;; Future

(define-record future-internal (result ready mutex signal))
(define (blodwen-make-future work)
  (let ([future (make-future-internal #f #f (make-mutex) (make-condition))])
    (fork-thread (lambda ()
      (let ([result (work)])
        (with-mutex (future-internal-mutex future)
          (set-future-internal-result! future result)
          (set-future-internal-ready! future #t)
          (condition-broadcast (future-internal-signal future))))))
    future))
(define (blodwen-await-future ty future)
  (let ([mutex (future-internal-mutex future)])
    (with-mutex mutex
      (if (not (future-internal-ready future))
          (condition-wait (future-internal-signal future) mutex))
      (future-internal-result future))))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))


(define (blodwen-arg-count)
  (length (command-line)))

(define (blodwen-arg n)
  (if (< n (length (command-line))) (list-ref (command-line) n) ""))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))

;; For creating and reading back scheme objects

; read a scheme string and evaluate it, returning 'Just result' on success
; TODO: catch exception!
(define (blodwen-eval-scheme str)
  (guard
     (x [#t '()]) ; Nothing on failure
     (box (eval (read (open-input-string str)))))
  ); box == Just

(define (blodwen-eval-okay obj)
  (if (null? obj)
      0
      1))

(define (blodwen-get-eval-result obj)
  (unbox obj))

(define (blodwen-debug-scheme obj)
  (display obj) (newline))

(define (blodwen-is-number obj)
  (if (number? obj) 1 0))

(define (blodwen-is-integer obj)
  (if (and (number? obj) (exact? obj)) 1 0))

(define (blodwen-is-float obj)
  (if (flonum? obj) 1 0))

(define (blodwen-is-char obj)
  (if (char? obj) 1 0))

(define (blodwen-is-string obj)
  (if (string? obj) 1 0))

(define (blodwen-is-procedure obj)
  (if (procedure? obj) 1 0))

(define (blodwen-is-symbol obj)
  (if (symbol? obj) 1 0))

(define (blodwen-is-vector obj)
  (if (vector? obj) 1 0))

(define (blodwen-is-nil obj)
  (if (null? obj) 1 0))

(define (blodwen-is-pair obj)
  (if (pair? obj) 1 0))

(define (blodwen-is-box obj)
  (if (box? obj) 1 0))

(define (blodwen-make-symbol str)
  (string->symbol str))

; The below rely on checking that the objects are the right type first.

(define (blodwen-vector-ref obj i)
  (vector-ref obj i))

(define (blodwen-vector-length obj)
  (vector-length obj))

(define (blodwen-vector-list obj)
  (vector->list obj))

(define (blodwen-unbox obj)
  (unbox obj))

(define (blodwen-apply obj arg)
  (obj arg))

(define (blodwen-force obj)
  (obj))

(define (blodwen-read-symbol sym)
  (symbol->string sym))

(define (blodwen-id x) x)
(define PreludeC-45Types-fastUnpack (lambda (farg-0) (string-unpack farg-0)))
(define PreludeC-45Types-fastPack (lambda (farg-0) (string-pack farg-0)))
(define PreludeC-45IO-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure "idris2_putStr" (string) void) farg-0) (vector 0 )))
(define NetworkC-45FFI-prim__idrnet_socket (lambda (farg-0 farg-1 farg-2 farg-3) ((foreign-procedure "idrnet_socket" (int int int) int) farg-0 farg-1 farg-2)))
(define NetworkC-45FFI-prim__idrnet_sockaddr_unix (lambda (farg-0 farg-1) ((foreign-procedure "idrnet_sockaddr_unix" (void*) string) farg-0)))
(define NetworkC-45FFI-prim__idrnet_sockaddr_ipv4 (lambda (farg-0 farg-1) ((foreign-procedure "idrnet_sockaddr_ipv4" (void*) string) farg-0)))
(define NetworkC-45FFI-prim__idrnet_sockaddr_family (lambda (farg-0 farg-1) ((foreign-procedure "idrnet_sockaddr_family" (void*) int) farg-0)))
(define NetworkC-45FFI-prim__idrnet_send (lambda (farg-0 farg-1 farg-2) ((foreign-procedure "idrnet_send" (int string) int) farg-0 farg-1)))
(define NetworkC-45FFI-prim__idrnet_recv (lambda (farg-0 farg-1 farg-2) ((foreign-procedure __collect_safe "idrnet_recv" (int int) void*) farg-0 farg-1)))
(define NetworkC-45FFI-prim__idrnet_listen (lambda (farg-0 farg-1 farg-2) ((foreign-procedure "idrnet_listen" (int int) int) farg-0 farg-1)))
(define NetworkC-45FFI-prim__idrnet_get_recv_res (lambda (farg-0 farg-1) ((foreign-procedure "idrnet_get_recv_res" (void*) int) farg-0)))
(define NetworkC-45FFI-prim__idrnet_get_recv_payload (lambda (farg-0 farg-1) ((foreign-procedure "idrnet_get_recv_payload" (void*) string) farg-0)))
(define NetworkC-45FFI-prim__idrnet_free_recv_struct (lambda (farg-0 farg-1) ((foreign-procedure "idrnet_free_recv_struct" (void*) void) farg-0) (vector 0 )))
(define NetworkC-45FFI-prim__idrnet_create_sockaddr (lambda (farg-0) ((foreign-procedure "idrnet_create_sockaddr" () void*) )))
(define NetworkC-45FFI-prim__idrnet_close (lambda (farg-0 farg-1) ((foreign-procedure "idrnet_close" (int) int) farg-0)))
(define NetworkC-45FFI-prim__idrnet_bind (lambda (farg-0 farg-1 farg-2 farg-3 farg-4 farg-5) ((foreign-procedure "idrnet_bind" (int int int string int) int) farg-0 farg-1 farg-2 farg-3 farg-4)))
(define NetworkC-45FFI-prim__idrnet_accept (lambda (farg-0 farg-1 farg-2) ((foreign-procedure __collect_safe "idrnet_accept" (int void*) int) farg-0 farg-1)))
(define NetworkC-45SocketC-45Data-prim__idrnet_errno (lambda (farg-0) ((foreign-procedure "idrnet_errno" () int) )))
(define NetworkC-45SocketC-45Data-prim__idrnet_af_unspec (lambda (farg-0) ((foreign-procedure "idrnet_af_unspec" () int) )))
(define NetworkC-45SocketC-45Data-prim__idrnet_af_unix (lambda (farg-0) ((foreign-procedure "idrnet_af_unix" () int) )))
(define NetworkC-45SocketC-45Data-prim__idrnet_af_inet6 (lambda (farg-0) ((foreign-procedure "idrnet_af_inet6" () int) )))
(define NetworkC-45SocketC-45Data-prim__idrnet_af_inet (lambda (farg-0) ((foreign-procedure "idrnet_af_inet" () int) )))
(define SystemC-45FFI-prim__free (lambda (farg-0 farg-1) ((foreign-procedure "idris2_free" (void*) void) farg-0) (vector 0 )))
(define csegen-12(blodwen-lazy (lambda () (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (PreludeC-45IO-u--map_Functor_IO u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (lambda (eta-0) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (PrimIO-io_bind arg-9446 (lambda (u--fC-39) (PrimIO-io_bind arg-9453 (lambda (u--aC-39) (lambda (eta-0) (u--fC-39 u--aC-39))))))))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (PrimIO-io_bind arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (PrimIO-io_bind arg-9934 (lambda (eta-0) eta-0))))))))
(define csegen-13(blodwen-lazy (lambda () (cons (csegen-12) (lambda (u--a) (lambda (arg-12571) arg-12571))))))
(define csegen-20(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (PreludeC-45TypesC-45List-mapAppend '() eta-2 eta-3))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))))))
(define u--prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define Main-case--update-8698 (lambda (arg-0 arg-1) (if (null? arg-1) (lambda (eta-0) (vector 0 )) (let ((e-2 (unbox arg-1))) (PrimIO-io_bind (NetworkC-45Socket-send (csegen-13) e-2 "HTTP/1.1 200 OK\xd;\xa;Content: text/plain\xd;\xa;\xd;\xa;body") (lambda (u--res) (Main-mapRightIO u--res (lambda (lamc-0) (PreludeC-45Interfaces-C-62C-62 (csegen-12) (NetworkC-45Socket-close (csegen-13) e-2) (lambda () (Main-update 2 arg-0)))))))))))
(define Main-case--update-8634 (lambda (arg-0 arg-1) (if (null? arg-1) (lambda (eta-0) (vector 0 )) (let ((e-2 (unbox arg-1))) (PrimIO-io_bind (NetworkC-45Socket-recv (csegen-13) e-2 (blodwen-toSignedInt 500 63)) (lambda (u--res) (Main-mapRightIO u--res (lambda (lamc-0) (let ((e-4 (car lamc-0))) (PreludeC-45Interfaces-C-62C-62 (csegen-12) (PreludeC-45IO-putStrLn (csegen-13) (string-append "request: " e-4)) (lambda () (Main-update 4 arg-0))))))))))))
(define Main-update (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (PrimIO-io_bind (NetworkC-45Socket-bind (csegen-13) (let ((e-1 (vector-ref arg-1 1))) e-1) (box (vector 2 "0.0.0.0")) (let ((e-0 (vector-ref arg-1 0))) e-0)) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (PreludeC-45IO-putStrLn (csegen-13) (string-append "Failed to bind socket with error: " (PreludeC-45Show-u--show_Show_Int u--res)))) (else (Main-update 1 arg-1))))))) ((equal? arg-0 1) (PrimIO-io_bind (NetworkC-45Socket-listen (csegen-13) (let ((e-1 (vector-ref arg-1 1))) e-1)) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (PreludeC-45IO-putStrLn (csegen-13) (string-append "Failed to listen on socket with error: " (PreludeC-45Show-u--show_Show_Int u--res)))) (else (PreludeC-45Interfaces-C-62C-62 (csegen-12) (PreludeC-45IO-putStrLn (csegen-13) (string-append "server running on: " (PreludeC-45Show-u--show_Show_Int (let ((e-0 (vector-ref arg-1 0))) e-0)))) (lambda () (PreludeC-45Interfaces-C-62C-62 (csegen-12) (Main-update 2 arg-1) (lambda () (PreludeC-45IO-putStrLn (csegen-13) "killing process "))))))))))) ((equal? arg-0 2) (PrimIO-io_bind (NetworkC-45Socket-accept (csegen-13) (let ((e-1 (vector-ref arg-1 1))) e-1)) (lambda (u--res) (Main-mapRightIO u--res (lambda (lamc-0) (let ((e-2 (car lamc-0))) (Main-update 3 (vector (let ((e-0 (vector-ref arg-1 0))) e-0) (let ((e-1 (vector-ref arg-1 1))) e-1) (box e-2))))))))) ((equal? arg-0 3) (Main-case--update-8634 arg-1 (let ((e-2 (vector-ref arg-1 2))) e-2))) (else (Main-case--update-8698 arg-1 (let ((e-2 (vector-ref arg-1 2))) e-2))))))
(define Main-startServer (lambda (arg-0) (PrimIO-io_bind (NetworkC-45Socket-socket (csegen-13) 2 1 0) (lambda (u--osock) (case (vector-ref u--osock 0) ((0) (lambda (eta-0) (vector 0 ))) (else (let ((e-5 (vector-ref u--osock 1))) (Main-update 0 (vector arg-0 e-5 '())))))))))
(define Main-mapRightIO (lambda (arg-2 arg-3) (case (vector-ref arg-2 0) ((0) (lambda (eta-0) (vector 0 ))) (else (let ((e-5 (vector-ref arg-2 1))) (arg-3 e-5))))))
(define Main-main(blodwen-lazy (lambda () (Main-startServer (blodwen-toSignedInt 5000 63)))))
(define NetworkC-45Socket-n--3959-7797-u--saString (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) "" (let ((e-1 (unbox arg-5))) (NetworkC-45SocketC-45Data-u--show_Show_SocketAddress e-1)))))
(define NetworkC-45Socket-socket (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_socket (NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketFamily arg-2) (NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketType arg-3) arg-4 eta-0))))) (lambda (u--socket_res) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--socket_res (blodwen-toSignedInt -1 63)))) (cond ((equal? sc1 1) (((let ((eff-0 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))))) (lambda (arg-0) (lambda (arg-5) ((((eff-0 'erased) 'erased) arg-0) arg-5)))) (lambda (eta-0) (vector 0 eta-0))) (NetworkC-45SocketC-45Data-getErrno arg-1))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (vector u--socket_res arg-2 arg-3 arg-4)))))))))))))))
(define NetworkC-45Socket-send (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_send (let ((e-0 (vector-ref arg-2 0))) e-0) arg-3 eta-0))))) (lambda (u--send_res) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--send_res (blodwen-toSignedInt -1 63)))) (cond ((equal? sc1 1) (((let ((eff-0 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))))) (lambda (arg-0) (lambda (arg-4) ((((eff-0 'erased) 'erased) arg-0) arg-4)))) (lambda (eta-0) (vector 0 eta-0))) (NetworkC-45SocketC-45Data-getErrno arg-1))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 u--send_res))))))))))))))
(define NetworkC-45Socket-recv (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_recv (let ((e-0 (vector-ref arg-2 0))) e-0) arg-3 eta-0))))) (lambda (u--recv_struct_ptr) (let ((e-7 (car arg-1))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (let ((e-11 (cdr arg-1))) ((e-11 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_get_recv_res u--recv_struct_ptr eta-0))))) (lambda (u--recv_res) (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--recv_res (blodwen-toSignedInt -1 63)))) (cond ((equal? sc2 1) (let ((e-12 (car arg-1))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (NetworkC-45SocketC-45Data-getErrno arg-1)) (lambda (u--errno) (PreludeC-45Interfaces-C-62C-62 (let ((e-17 (car arg-1))) e-17) (NetworkC-45SocketC-45Raw-freeRecvStruct arg-1 u--recv_struct_ptr) (lambda () (let ((e-17 (car arg-1))) (let ((e-20 (vector-ref e-17 0))) (let ((e-22 (vector-ref e-20 1))) ((e-22 'erased) (vector 0 u--errno)))))))))))) (else (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--recv_res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc3 1) (PreludeC-45Interfaces-C-62C-62 (let ((e-12 (car arg-1))) e-12) (NetworkC-45SocketC-45Raw-freeRecvStruct arg-1 u--recv_struct_ptr) (lambda () (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (vector 0 (blodwen-toSignedInt 0 63))))))))) (else (let ((e-12 (car arg-1))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (let ((e-16 (cdr arg-1))) ((e-16 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_get_recv_payload u--recv_struct_ptr eta-0))))) (lambda (u--payload) (PreludeC-45Interfaces-C-62C-62 (let ((e-17 (car arg-1))) e-17) (NetworkC-45SocketC-45Raw-freeRecvStruct arg-1 u--recv_struct_ptr) (lambda () (let ((e-17 (car arg-1))) (let ((e-20 (vector-ref e-17 0))) (let ((e-22 (vector-ref e-20 1))) ((e-22 'erased) (vector 1 (cons u--payload u--recv_res))))))))))))))))))))))))))))
(define NetworkC-45Socket-listen (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_listen (let ((e-0 (vector-ref arg-2 0))) e-0) (NetworkC-45SocketC-45Data-BACKLOG) eta-0))))) (lambda (u--listen_res) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--listen_res (blodwen-toSignedInt -1 63)))) (cond ((equal? sc1 1) (NetworkC-45SocketC-45Data-getErrno arg-1)) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (blodwen-toSignedInt 0 63))))))))))))))
(define NetworkC-45Socket-close (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_close (let ((e-0 (vector-ref arg-2 0))) e-0) eta-0))))) (lambda (u--_) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 0 )))))))))))
(define NetworkC-45Socket-bind (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_bind (let ((e-0 (vector-ref arg-2 0))) e-0) (NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketFamily (let ((e-10 (vector-ref arg-2 1))) e-10)) (NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketType (let ((e-9 (vector-ref arg-2 2))) e-9)) (NetworkC-45Socket-n--3959-7797-u--saString arg-1 arg-4 arg-3 arg-2 arg-3) arg-4 eta-0))))) (lambda (u--bind_res) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--bind_res (blodwen-toSignedInt -1 63)))) (cond ((equal? sc1 1) (NetworkC-45SocketC-45Data-getErrno arg-1)) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (blodwen-toSignedInt 0 63))))))))))))))
(define NetworkC-45Socket-accept (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_create_sockaddr eta-0))))) (lambda (u--sockaddr_ptr) (let ((e-7 (car arg-1))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (let ((e-11 (cdr arg-1))) ((e-11 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_accept (let ((e-0 (vector-ref arg-2 0))) e-0) u--sockaddr_ptr eta-0))))) (lambda (u--accept_res) (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--accept_res (blodwen-toSignedInt -1 63)))) (cond ((equal? sc2 1) (((let ((eff-0 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-18 (vector-ref e-15 0))) e-18))))) (lambda (arg-0) (lambda (arg-3) ((((eff-0 'erased) 'erased) arg-0) arg-3)))) (lambda (eta-0) (vector 0 eta-0))) (NetworkC-45SocketC-45Data-getErrno arg-1))) (else (let ((e-13 (vector-ref arg-2 1))) (let ((e-12 (vector-ref arg-2 2))) (let ((e-11 (vector-ref arg-2 3))) (let ((e-15 (car arg-1))) (let ((e-17 (vector-ref e-15 1))) ((((e-17 'erased) 'erased) (NetworkC-45SocketC-45Raw-getSockAddr arg-1 u--sockaddr_ptr)) (lambda (u--sockaddr) (PreludeC-45Interfaces-C-62C-62 (let ((e-20 (car arg-1))) e-20) (NetworkC-45SocketC-45Raw-sockaddr_free arg-1 u--sockaddr_ptr) (lambda () (let ((e-20 (car arg-1))) (let ((e-23 (vector-ref e-20 0))) (let ((e-25 (vector-ref e-23 1))) ((e-25 'erased) (vector 1 (cons (vector u--accept_res e-13 e-12 e-11) u--sockaddr))))))))))))))))))))))))))))
(define PreludeC-45Basics-flip (lambda (arg-3 arg-4 arg-5) ((arg-3 arg-5) arg-4)))
(define Builtin-idris_crash (lambda (ext-0) (blodwen-error-quit (string-append "ERROR: " ext-0))))
(define PreludeC-45Types-u--null_Foldable_List (lambda (arg-1) (if (null? arg-1) 1 0)))
(define PreludeC-45Types-u--foldr_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) ((arg-2 e-2) (PreludeC-45Types-u--foldr_Foldable_List arg-2 arg-3 e-3)))))))
(define PreludeC-45Types-u--foldl_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-u--foldl_Foldable_List arg-2 ((arg-2 arg-3) e-2) e-3))))))
(define PreludeC-45Types-u--foldlM_Foldable_List (lambda (arg-3 arg-4 arg-5 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-4 u--b eta-0)))))) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-5))) ext-0)))
(define PreludeC-45Types-u--foldMap_Foldable_List (lambda (arg-2 arg-3 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--acc) (lambda (u--elem) (((let ((eff-0 (let ((e-1 (car arg-2))) e-1))) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))) u--acc) (arg-3 u--elem)))) (let ((e-2 (cdr arg-2))) e-2) ext-0)))
(define PreludeC-45Types-prim__integerToNat (lambda (arg-0) (let ((sc0 (let ((sc1 (or (and (<= 0 arg-0) 1) 0))) (cond ((equal? sc1 0) 0)(else 1))))) (cond ((equal? sc0 1) arg-0) (else 0)))))
(define PreludeC-45TypesC-45List-mapAppend (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-2 '()) (let ((e-1 (car arg-4))) (let ((e-2 (cdr arg-4))) (PreludeC-45TypesC-45List-mapAppend (cons arg-2 (arg-3 e-1)) arg-3 e-2))))))
(define PreludeC-45TypesC-45SnocList-C-60C-62C-62 (lambda (arg-1 arg-2) (if (null? arg-1) arg-2 (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 e-2 (cons e-3 arg-2)))))))
(define PreludeC-45EqOrd-u--compare_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Integer arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 2) (cond ((equal? arg-1 2) 1)(else 0)))(else 0))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-compareInteger (lambda (ext-0 ext-1) (PreludeC-45EqOrd-u--compare_Ord_Integer ext-0 ext-1)))
(define PreludeC-45Interfaces-concat (lambda (arg-2 arg-3 ext-0) (let ((e-6 (vector-ref arg-3 5))) (((((e-6 'erased) 'erased) arg-2) (lambda (eta-0) eta-0)) ext-0))))
(define PreludeC-45Interfaces-C-62C-62 (lambda (arg-2 arg-3 arg-4) (let ((e-2 (vector-ref arg-2 1))) ((((e-2 'erased) 'erased) arg-3) (lambda (_-10158) (arg-4))))))
(define PreludeC-45Show-u--show_Show_Int (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Int (vector 0 ) arg-0)))
(define PreludeC-45Show-u--showPrec_Show_Int (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--compare_Ord_Prec (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((4) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-1 (vector-ref arg-1 1))) (PreludeC-45EqOrd-u--compare_Ord_Integer e-0 e-1)))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))
(define PreludeC-45Show-u--C-62C-61_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Show-u--compare_Ord_Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-showParens (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) arg-1) (else (string-append "(" (string-append arg-1 ")"))))))
(define PreludeC-45Show-primNumShow (lambda (arg-1 arg-2 arg-3) (let ((u--str (arg-1 arg-3))) (PreludeC-45Show-showParens (let ((sc0 (PreludeC-45Show-u--C-62C-61_Ord_Prec arg-2 (vector 5 )))) (cond ((equal? sc0 1) (PreludeC-45Show-firstCharIs (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\-)) u--str)) (else 0))) u--str))))
(define PreludeC-45Show-precCon (lambda (arg-0) (case (vector-ref arg-0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6))))
(define PreludeC-45Show-firstCharIs (lambda (arg-0 arg-1) (cond ((equal? arg-1 "") 0)(else (arg-0 (string-ref arg-1 0))))))
(define PreludeC-45IO-u--map_Functor_IO (lambda (arg-2 arg-3) (PrimIO-io_bind arg-3 (lambda (eta-0) (lambda (eta-1) (arg-2 eta-0))))))
(define PreludeC-45IO-putStrLn (lambda (arg-1 arg-2) (PreludeC-45IO-putStr arg-1 (string-append arg-2 "\xa;"))))
(define PreludeC-45IO-putStr (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr arg-2 eta-0))))))
(define PrimIO-case--io_bind-933 (lambda (arg-3 arg-5) (let ((eff-0 arg-5)) (let ((eff-1 (arg-3 eff-0))) (eff-1 'erased)))))
(define PrimIO-unsafePerformIO (lambda (arg-1) (let ((eff-0 arg-1)) (PrimIO-unsafeCreateWorld (lambda (u--w) (let ((eff-1 (eff-0 u--w))) eff-1))))))
(define PrimIO-unsafeCreateWorld (lambda (arg-1) (arg-1 #f)))
(define PrimIO-io_bind (lambda (arg-2 arg-3) (let ((eff-0 arg-2)) (lambda (u--w) (PrimIO-case--io_bind-933 arg-3 (eff-0 u--w))))))
(define DataC-45List1-u--map_Functor_List1 (lambda (arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (cons (arg-2 e-1) (((csegen-20) arg-2) e-2))))))
(define DataC-45List1-singleton (lambda (arg-1) (cons arg-1 '())))
(define DataC-45List1-forget (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (cons e-1 e-2)))))
(define DataC-45List-split (lambda (arg-1 arg-2) (let ((sc0 (DataC-45List-break arg-1 arg-2))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (DataC-45List1-singleton e-2) (let ((e-7 (cdr e-3))) (cons e-2 (DataC-45List1-forget (DataC-45List-split arg-1 e-7))))))))))
(define DataC-45List-span (lambda (arg-1 arg-2) (if (null? arg-2) (cons '() '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (arg-1 e-2))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45List-span arg-1 e-3))) (let ((e-5 (car sc2))) (let ((e-4 (cdr sc2))) (cons (cons e-2 e-5) e-4))))) (else (cons '() (cons e-2 e-3))))))))))
(define DataC-45List-mergeReplicate (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons arg-1 (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3))))))))
(define DataC-45List-lookupBy (lambda (arg-3 arg-4 arg-5) (if (null? arg-5) '() (let ((e-2 (car arg-5))) (let ((e-3 (cdr arg-5))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (let ((sc2 ((arg-3 arg-4) e-6))) (cond ((equal? sc2 1) (box e-7)) (else (DataC-45List-lookupBy arg-3 arg-4 e-3)))))))))))
(define DataC-45List-lookup (lambda (arg-2 ext-0 ext-1) (DataC-45List-lookupBy (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-2))) ((e-1 eta-0) eta-1)))) ext-0 ext-1)))
(define DataC-45List-intersperse (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3)))))))
(define DataC-45List-break (lambda (arg-1 arg-2) (DataC-45List-span (lambda (eta-0) (let ((sc0 (arg-1 eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) arg-2)))
(define NetworkC-45SocketC-45Data-n--4274-8110-u--toIntC-39 (lambda (arg-0 ext-0) (cast-string-int ext-0)))
(define NetworkC-45SocketC-45Data-n--4274-8111-u--toInt (lambda (arg-0 arg-1) (blodwen-toSignedInt (NetworkC-45SocketC-45Data-n--4274-8110-u--toIntC-39 arg-0 arg-1) 63)))
(define NetworkC-45SocketC-45Data-n--4274-8112-u--splitted (lambda (arg-0) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (NetworkC-45SocketC-45Data-n--4274-8111-u--toInt arg-0 eta-0)) (DataC-45String-split (lambda (u--c) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char u--c #\.)) arg-0))))
(define NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketType (lambda (arg-0) (cond ((equal? arg-0 0) 0) ((equal? arg-0 1) 1) ((equal? arg-0 2) 2) (else 3))))
(define NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketFamily (lambda (arg-0) (cond ((equal? arg-0 0) (PrimIO-unsafePerformIO (lambda (eta-0) (NetworkC-45SocketC-45Data-prim__idrnet_af_unspec eta-0)))) ((equal? arg-0 1) (PrimIO-unsafePerformIO (lambda (eta-0) (NetworkC-45SocketC-45Data-prim__idrnet_af_unix eta-0)))) ((equal? arg-0 2) (PrimIO-unsafePerformIO (lambda (eta-0) (NetworkC-45SocketC-45Data-prim__idrnet_af_inet eta-0)))) (else (PrimIO-unsafePerformIO (lambda (eta-0) (NetworkC-45SocketC-45Data-prim__idrnet_af_inet6 eta-0)))))))
(define NetworkC-45SocketC-45Data-u--show_Show_SocketAddress (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (let ((e-1 (vector-ref arg-0 2))) (let ((e-2 (vector-ref arg-0 3))) (let ((e-3 (vector-ref arg-0 4))) (PreludeC-45Interfaces-concat (cons (lambda (arg-8326) (lambda (arg-8329) (string-append arg-8326 arg-8329))) "") (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10420) (PreludeC-45Types-u--null_Foldable_List arg-10420))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_List i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10449) arg-10449)) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10463) (PreludeC-45Types-u--foldMap_Foldable_List i_con-0 u--f arg-10463))))))) (DataC-45List-intersperse "." (((csegen-20) (lambda (eta-0) (PreludeC-45Show-u--show_Show_Int eta-0))) (cons e-0 (cons e-1 (cons e-2 (cons e-3 '())))))))))))) ((1) "NOT IMPLEMENTED YET") ((2) (let ((e-4 (vector-ref arg-0 1))) e-4)) (else "Invalid"))))
(define NetworkC-45SocketC-45Data-parseIPv4 (lambda (arg-0) (let ((sc0 (NetworkC-45SocketC-45Data-n--4274-8112-u--splitted arg-0))) (if (null? sc0) (vector 3 ) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (if (null? e-2) (vector 3 ) (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (if (null? e-5) (vector 3 ) (let ((e-7 (car e-5))) (let ((e-8 (cdr e-5))) (if (null? e-8) (vector 3 ) (let ((e-10 (car e-8))) (vector 0 e-1 e-4 e-7 e-10)))))))))))))))
(define NetworkC-45SocketC-45Data-getSocketFamily (lambda (arg-0) (DataC-45List-lookup (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int arg-538 arg-541)))) arg-0 (cons (cons (NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketFamily 0) 0) (cons (cons (NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketFamily 1) 1) (cons (cons (NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketFamily 2) 2) (cons (cons (NetworkC-45SocketC-45Data-u--toCode_ToCode_SocketFamily 3) 3) '())))))))
(define NetworkC-45SocketC-45Data-getErrno (lambda (arg-1) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (NetworkC-45SocketC-45Data-prim__idrnet_errno eta-0))))))
(define NetworkC-45SocketC-45Data-BACKLOG(blodwen-lazy (lambda () 20)))
(define DataC-45String-split (lambda (arg-0 arg-1) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45List-split arg-0 (PreludeC-45Types-fastUnpack arg-1)))))
(define NetworkC-45SocketC-45Raw-sockaddr_free (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (SystemC-45FFI-free arg-1 eff-0))))
(define NetworkC-45SocketC-45Raw-getSockAddr (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_sockaddr_family eff-0 eta-0))))) (lambda (u--addr_family_int) (let ((sc1 (NetworkC-45SocketC-45Data-getSocketFamily u--addr_family_int))) (if (null? sc1) (Builtin-idris_crash "Unhandled input for Network.Socket.Raw.case block in getSockAddr at Network.Socket.Raw:64:1--75:43") (let ((e-6 (unbox sc1))) (cond ((equal? e-6 2) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (let ((e-12 (cdr arg-1))) ((e-12 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_sockaddr_ipv4 eff-0 eta-0))))) (lambda (u--ipv4_addr) (let ((e-13 (car arg-1))) (let ((e-16 (vector-ref e-13 0))) (let ((e-18 (vector-ref e-16 1))) ((e-18 'erased) (NetworkC-45SocketC-45Data-parseIPv4 u--ipv4_addr)))))))))) ((equal? e-6 3) (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) (vector 1 )))))) ((equal? e-6 1) (((let ((eff-1 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))))) (lambda (arg-0) (lambda (arg-3) ((((eff-1 'erased) 'erased) arg-0) arg-3)))) (lambda (eta-0) (vector 2 eta-0))) (let ((e-7 (cdr arg-1))) ((e-7 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_sockaddr_unix eff-0 eta-0)))))) ((equal? e-6 0) (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) (vector 3 ))))))(else (Builtin-idris_crash "Unhandled input for Network.Socket.Raw.case block in getSockAddr at Network.Socket.Raw:64:1--75:43")))))))))))))
(define NetworkC-45SocketC-45Raw-freeRecvStruct (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (NetworkC-45FFI-prim__idrnet_free_recv_struct eff-0 eta-0)))))))
(define SystemC-45FFI-free (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FFI-prim__free arg-2 eta-0))))))
(load-shared-object "libidris2_support.so")
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO (Main-main))
  (collect 4)
  (blodwen-run-finalisers)
  
  )